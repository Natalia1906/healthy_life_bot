import os
import random
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from states import UserState
from utils import get_greeting, calculate_water_norm
from database import Database
from keyboards import keyboards
from config import WORKOUTS, DAILY_MENU, MOTIVATION_PHRASES

router = Router()
db = Database()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ù–∞—á–∏–Ω–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç
    –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    user_data = db.get_user_stats(message.from_user.id)

    if user_data:
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=keyboards['main']
        )
        return

    await message.answer(get_greeting(message.from_user.first_name), reply_markup=ReplyKeyboardRemove())

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserState.waiting_for_age)


@router.message(UserState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    try:
        age = int(message.text)
        if age < 12 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-100 –ª–µ—Ç)",
                                 reply_markup=ReplyKeyboardRemove())
            return

        await state.update_data(age=age)
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(UserState.waiting_for_height)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ReplyKeyboardRemove())


@router.message(UserState.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ—Å—Ç–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    try:
        height = int(message.text)
        if height < 50 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º)", reply_markup=ReplyKeyboardRemove())
            return

        await state.update_data(height=height)
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(UserState.waiting_for_weight)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ReplyKeyboardRemove())


@router.message(UserState.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ—Å–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)", reply_markup=ReplyKeyboardRemove())
            return

        user_data = await state.get_data()
        height = user_data['height']
        age = user_data['age']

        db.add_user(message.from_user.id, age, height, weight)

        await state.clear()
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
            reply_markup=keyboards['main']
        )

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=ReplyKeyboardRemove())


@router.message(F.text == "üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
async def show_exercises(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=keyboards['exercise']
    )


@router.callback_query(F.data.startswith("exercise_"))
async def process_exercise_choice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º

    Returns:
        None
    """

    level = callback.data.split('_')[1]
    await callback.message.answer(WORKOUTS[level])
    await callback.answer()


@router.message(F.text == "ü•ó –ü–∏—Ç–∞–Ω–∏–µ")
async def show_diet_menu(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=keyboards['diet']
    )


@router.callback_query(lambda c: c.data.startswith('diet_'))
async def process_diet_day(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏

    Returns:
        None
    """

    day = callback.data.split('_')[1]
    await callback.message.answer(DAILY_MENU[day])
    await callback.answer()


@router.message(F.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def show_motivation(message: Message):
    """–ü–æ–∫–∞–∑ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    phrase = random.choice(MOTIVATION_PHRASES)
    await message.answer(phrase)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    help_text = """
    –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
    
    üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    ‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å - –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –≤–µ—Å
    üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    ü•ó –ü–∏—Ç–∞–Ω–∏–µ - –ø—Ä–∏–º–µ—Ä –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
    üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã
    ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await message.answer(help_text)


@router.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    stats = db.get_user_stats(message.from_user.id)
    if not stats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    graph_path = db.create_weight_graph(message.from_user.id)

    bmi = stats['current_weight'] / ((stats['height'] / 100) ** 2)
    weight_diff = stats['current_weight'] - stats['initial_weight']

    progress_text = f"""
    –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    –†–æ—Å—Ç: {stats['height']} —Å–º
    –ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {stats['initial_weight']} –∫–≥
    –¢–µ–∫—É—â–∏–π –≤–µ—Å: {stats['current_weight']} –∫–≥
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_diff:+.1f} –∫–≥
    –ò–ú–¢: {bmi:.1f}
    """
    await message.answer(progress_text)

    if graph_path:
        try:
            await message.answer_photo(photo=FSInputFile(graph_path))
        finally:
            if os.path.exists(graph_path):
                os.remove(graph_path)


@router.message(F.text == "‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å")
async def update_weight_cmd(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
    await state.set_state(UserState.updating_weight)


@router.message(UserState.updating_weight)
async def process_weight_update(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤–µ—Å–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    Returns:
        None
    """

    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
            return

        db.update_weight(message.from_user.id, weight)
        await state.clear()
        await message.answer("–í–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(F.text == "üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã")
async def show_water_norm(message: Message):
    """–†–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    user_stats = db.get_user_stats(message.from_user.id)
    if not user_stats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    weight = float(user_stats['current_weight'])
    height = float(user_stats['height'])
    water_norm = calculate_water_norm(weight, height)

    response_text = f"""
üíß –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã:
{water_norm} –ª–∏—Ç—Ä–æ–≤ –≤ –¥–µ–Ω—å

üìä –†–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ:
‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –†–æ—Å—Ç: {height} —Å–º

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π
‚Ä¢ –ü–µ–π—Ç–µ –≤–æ–¥—É –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏—ë–º –≤–æ–¥—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
"""
    await message.answer(response_text)


@router.message(F.text == "‚öôÔ∏è –°–±—Ä–æ—Å")
async def reset_progress(message: Message):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    confirmation_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
            ]
        ]
    )

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirmation_kb
    )


@router.callback_query(F.data == "confirm_reset")
async def process_reset_confirmation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º

    Returns:
        None

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    """

    try:
        db.delete_user_data(callback.from_user.id)
        await callback.message.edit_text("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"Error during reset: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        await callback.answer()


@router.callback_query(F.data == "cancel_reset")
async def process_cansel_reset(message: Message):
    """
    –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message : –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ÉüòÄ")


@router.message()
async def unknown_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns:
        None
    """

    await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É  <‚ùì –ü–æ–º–æ—â—å > , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã ")
