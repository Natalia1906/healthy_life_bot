import pytest
from utils import get_greeting, calculate_water_norm


def test_get_greeting_with_name():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = "John"
    greeting = get_greeting(username)
    assert username in greeting
    assert "üëã" in greeting
    assert "üí™" in greeting
    assert "üçè" in greeting
    assert "üèÉÔ∏è" in greeting
    assert "üåü" in greeting


def test_get_greeting_with_empty_name():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º"""
    greeting = get_greeting("")
    assert "–ü—Ä–∏–≤–µ—Ç, !" in greeting


def test_calculate_water_norm_typical():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    weight = 70
    height = 170
    expected = round((70 * 0.03 + 170 * 0.01), 1)
    assert calculate_water_norm(weight, height) == expected


def test_calculate_water_norm_zero():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    assert calculate_water_norm(0, 0) == 0.0


def test_calculate_water_norm_large_numbers():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
    weight = 150
    height = 200
    expected = round((150 * 0.03 + 200 * 0.01), 1)
    assert calculate_water_norm(weight, height) == expected


@pytest.mark.parametrize("weight,height,expected", [
    (70, 170, 3.8),
    (50, 160, 3.1),
    (100, 190, 4.9),
    (0, 0, 0.0),
])
def test_calculate_water_norm_parametrize(weight, height, expected):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã"""
    assert calculate_water_norm(weight, height) == expected


def test_calculate_water_norm_negative():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    # –•–æ—Ç—è —ç—Ç–æ –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    result = calculate_water_norm(-70, -170)
    assert isinstance(result, float)
    assert result < 0